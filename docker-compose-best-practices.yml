version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.5
    container_name: traefik
    restart: unless-stopped
    command:
      # Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=nc-rag_web
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      
      # Let's Encrypt
      - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL:-admin@voronkov.club}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      
      # API and logging
      - --api.dashboard=true
      - --api.insecure=false
      - --log.level=INFO
      - --accesslog=true
      
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - web
    labels:
      - "traefik.enable=true"
      # Traefik dashboard (optional, for debugging)
      - "traefik.http.routers.traefik.rule=Host(`traefik.${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # PostgreSQL Database
  db:
    image: postgres:17-alpine
    container_name: nc-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nextcloud}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nc-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nextcloud Application
  nextcloud:
    image: nextcloud:31-apache
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
      
      # Admin user configuration
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:-admin}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD:-adminpass}
      
      # Domain and proxy configuration
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}
      OVERWRITEPROTOCOL: https
      OVERWRITEHOST: ${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}
      OVERWRITECLIURL: https://${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}
      TRUSTED_PROXIES: 172.20.0.0/16
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Performance settings
      PHP_MEMORY_LIMIT: 512M
      PHP_UPLOAD_LIMIT: 1G
      
    volumes:
      - nextcloud_data:/var/www/html
      - ./nextcloud-config:/var/www/html/config:rw
    networks:
      - web
      - backend
    labels:
      - "traefik.enable=true"
      
      # Main Nextcloud router
      - "traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nextcloud.priority=100"
      
      # Nextcloud-specific middleware for proper headers
      - "traefik.http.middlewares.nextcloud-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.nextcloud-headers.headers.customRequestHeaders.X-Forwarded-Host=${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}"
      - "traefik.http.middlewares.nextcloud-headers.headers.customRequestHeaders.X-Real-IP="
      - "traefik.http.middlewares.nextcloud-headers.headers.customRequestHeaders.X-Forwarded-For="
      - "traefik.http.middlewares.nextcloud-headers.headers.hostsProxyHeaders=X-Forwarded-Host"
      
      # Security headers
      - "traefik.http.middlewares.nextcloud-security.headers.frameDeny=true"
      - "traefik.http.middlewares.nextcloud-security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.nextcloud-security.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud-security.headers.stsPreload=true"
      - "traefik.http.middlewares.nextcloud-security.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow"
      
      # Combine middlewares
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-headers,nextcloud-security"
      
      # Service configuration
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.docker.network=nc-rag_web"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/status.php || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nextcloud Cron Job
  nextcloud-cron:
    image: nextcloud:31-apache
    container_name: nextcloud-cron
    restart: unless-stopped
    depends_on:
      nextcloud:
        condition: service_healthy
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
    volumes:
      - nextcloud_data:/var/www/html
      - ./nextcloud-config:/var/www/html/config:rw
    entrypoint: /cron.sh
    networks:
      - backend

  # Node-RED for webhooks (with proper routing)
  node-red:
    image: nodered/node-red:4.1
    container_name: node-red
    restart: unless-stopped
    environment:
      TZ: UTC
      NODE_RED_ENABLE_SAFE_MODE: false
      TENANT_DEFAULT: ${TENANT_DEFAULT:-default}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-changeme}
    volumes:
      - ./services/node-red/flows.json:/data/flows.json:ro
      - node_red_data:/data
    networks:
      - web
      - backend
    labels:
      - "traefik.enable=true"
      # High priority for specific webhook path
      - "traefik.http.routers.nodered.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && PathPrefix(`/webhooks/nextcloud`)"
      - "traefik.http.routers.nodered.entrypoints=websecure"
      - "traefik.http.routers.nodered.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nodered.priority=1000"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      - "traefik.docker.network=nc-rag_web"

  # Mock Parser Service
  mock-parser:
    build:
      context: ./services/mock-parser
    container_name: mock-parser
    restart: unless-stopped
    environment:
      UVICORN_WORKERS: 1
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Webhook Seeder
  nc-webhook-seeder:
    image: curlimages/curl:8.10.1
    container_name: nc-webhook-seeder
    restart: "no"
    depends_on:
      nextcloud:
        condition: service_healthy
    environment:
      NC_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:-admin}
      NC_ADMIN_PASS: ${NEXTCLOUD_ADMIN_PASSWORD:-adminpass}
      NC_DOMAIN: ${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-changeme}
    entrypoint: ["/bin/sh", "/scripts/register_webhooks.sh"]
    volumes:
      - ./scripts/register_webhooks.sh:/scripts/register_webhooks.sh:ro
    networks:
      - backend

volumes:
  nextcloud_data:
    driver: local
  db_data:
    driver: local
  redis_data:
    driver: local
  traefik_letsencrypt:
    driver: local
  node_red_data:
    driver: local

networks:
  web:
    name: nc-rag_web
    driver: bridge
  backend:
    name: nc-rag_backend
    driver: bridge
    internal: true